..
.. META INFORMATION OF TRANSLATION
..
..   $TranslationStatus: Done, waiting for revision $
..   $OriginalRevision: 11268 $
..   $TranslationAuthors: Italo Maia, Walter Cruz, Robson Mendonça $
..
.. INFO OF THIS FILE (DO NOT EDIT! UPDATED BY SUBVERSION)
..
..   $HeadURL$
..   $LastChangedRevision$
..   $LastChangedBy$
..   $LastChangedDate$
..


.. _faq-contributing:

FAQ: Contribuindo com código
============================

Como eu posso começar a contribuir com o código do Django?
----------------------------------------------------------

Obrigado por perguntar! Escrevemos um documento inteiro dedicado a essa questão
chamado :ref:`Contribuindo com o Django <internals-contributing>`.

Eu enviei uma correção de bug no sistema de tickets semanas atrás. Por que vocês estão ignorando meu patch?
------------------------------------------------------------------------------------------------------------

Não se preocupe, não estamos te ignorando!

É importante entender que há uma diferença entre "um ticket está sendo ignorado"
e "um ticket que ainda não foi atendido." O sistema de tickets do Django contém
centenas de tickets abertos, de vários graus de impacto na funcionalidade
oferecida aos usuários e os desenvolvedores do Django têm de revisá-los e
priorizá-los.

Além disso, as pessoas que trabalham com o Django são voluntárias. Como resultado,
a quantidade de tempo que temos para trabalhar no framework é limitada e irá
variar semanalmente, de acordo com nosso tempo livre. Se estivermos ocupados,
não poderemos gastar tanto tempo no Django como gostaríamos.

A melhor forma de fazer com que seu ticket ganhe o caminho da resolução, mesmo
por alguém que não é intimamente ligado a uma determinada área do código, para
entender o problema e verificar a solução::

    * Há instruções claras de como reproduzir o bug? Se este possui dependências
      (como o PIL), um módulo do contrib, ou um banco de dados específico, estas
      instruções são claras o suficiente para que qualquer familiarize-se com
      ela?

    * Se houver vários patches atachados ao ticket, está claro o que cada um
      faz, quais podem ser ignorados e o que importa?

    * Os patches incluem um teste unitário? Se não, há uma explicação muito
      clara do por que não tem? Um teste expressa sucintamente qual problema
      está ocorrendo, e mostra que o patche realmente o concerta.

Se seu patch não teve chance de inclusão no Django, nós não o ignoramos --
somente iremos fechar o ticket. Então se seu ticket ainda estiver aberto, não
significa que nós estamos ignorando você; somente quer dizer que nós não tivemos
tempo de olhá-lo ainda.

Quando e como eu posso relembrar o core team de um patch com qual me importo?
-----------------------------------------------------------------------------

Educadamente, uma mensagem, no momento certo, para a lista de desenvolvimento é
um bom caminho para ser receber atenção. Para determinar o tempo certo, você
precisa se manter atento com os agendamentos. Se você postar sua mensagem quando
os desenvolvedores principais estiverem tentando não estourar o prazo de uma
funcionalidade, ou em fase de planeijamento, você não terá toda a atenção que
desejas. Entretanto, e você chamar a atenção com um ticket quando os
desenvolvedores principais estão com as atenções voltadas para correção de
bugs -- bem na véspera de um sprint de correção de bugs, ou perto de um
lançamento de uma versão beta, por exemplo -- você terá muito mais chance de
receber uma resposta produtiva.

Lembretes gentis no IRC também podem funcionar -- novamente, num momento
estrategico se possível. Durante um sprint de correções de bugs pode ser uma
boa hora, por exemplo.

Another way to get traction is to pull several related tickets together. When
the core developers sit down to fix a bug in an area they haven't touched for
a while, it can take a few minutes to remember all the fine details of how
that area of code works. If you collect several minor bug fixes together into
a similarly themed group, you make an attractive target, as the cost of coming
up to speed on an area of code can be spread over multiple tickets.

Outra forma de ter atenção é postar vários tickets relacionados juntos. Quando
os desenvolvedores principais sentam para resolver bugs em uma certa área que
eles não tenham tocado a algum tempo, ele pode demorar um pouco para relembrar
todos os belos detalhes do funcionamento dessa área do código. Se você coleta
várias correções pequenas juntas dentro de um certo grupo, você cria um alvo
atrativo, como um custo para acelerar uma área de código podendo ser espalhado
sobre múltiplos tickets.

Por favor, contenha-se em não enviar email para um desenvolvedor do core team
pessoalmente, ou repetidamente levantar o mesmo problema, insistentemente. Este
tipo de comportamento não atrairá nenhuma atenção adicional -- certamente não a
atenção que você deseja para o seu bug de estimação.

Mas eu tenho lembravo você várias vezes e vocês continuam ignorando meu patch!
------------------------------------------------------------------------------

Sério - nós não ignoramos você. Se seu patch não recebe a chance de ser incluído
no Django, nós fechamos o ticket. Nós precisamos priorizar nossos esforços para
todos os outros tickets, o que significa que alguns tickets serão atendidos
antes de outros.

Um dos critérios que é usado para priorizar um bug é o número de pessoas que
serão atingidas por ele. Bugs que tem um potencial para afetar muita gente,
geralmente terá prioridade, em relação aos outros.

Uma outra razão para que bugs possam ser ignorados por um momento é se o bug é
um sintoma de um problema maior. Embora nós podemos gastar tempo escrevendo,
testando e aplicando um monte de patches, algumas vezes a solução certa é
refazer. Se uma reconstrução ou refatoração de um componente em particular for
proposta ou está a caminho, você pode encontrar bugs que afetam o componente,
mas eles não terão muita atenção. Novamente, isto é só uma questão de priorizar
recursos escassos. Concentrando na refatoração, nós poderemos fechar todos estes
pequenos bugs de uma vez, e esperançosamente previnir que outros pequenos bugs
apareçam no futuro.

Seja qual for o motivo, por favor, mantenha em mente que enquanto você pode
se incomodar com um bug regularmente, não significa que todos os usuários do
Django tenham o mesmo problema. Diferentes usuários usam o Django de difentes
formas, estressando diferentes partes do código em diferentes condições. Quando
nós avaliamos as prioridades relativas, nós geralmente estamos tentando
considerar as necessidades de toda comunidade, não somente a gravidade de um
determinado usuário. Isto não significa que pensamos que seu problema é
insignificante -- somente que em um limitado espaço de tempo que temos
disponível, nós sempre daremos a preferência para fazer 10 pessoas felizes ao
invés de uma só.

