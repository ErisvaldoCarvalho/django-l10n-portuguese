..
.. META INFORMATION OF TRANSLATION
..
..   $TranslationStatus: In progress $
..   $OriginalRevision: 9368 $
..   $TranslationAuthors: Robson Mendonça $
..
.. INFO OF THIS FILE (DO NOT EDIT! UPDATED BY SUBVERSION)
..
..   $HeadURL$
..   $LastChangedRevision$
..   $LastChangedBy$
..   $LastChangedDate$
..


.. _misc-api-stability:

===================
Estabilidade de API
===================

:ref:`O release do Django 1.0 <releases-1.0>` vem com a promessa de estabilidade
de API e compatibilidade futura. Em resumo, isto significa que o código que você
contriur utilizando o Django 1.0 irá funcionar com 1.1 sem mudanças, e você 
precisará fazer somente pequenas mudanças para qualquer release 1.x.

O que "stable" significa
========================

Neste contexto, "stable" significa:

   - Todas as APIs públicas -- tudo que está documentado nos links abaixo, e 
     todos os métodos que não comecem com um underscore -- não serão nem
     movidas nem renomeadas sem fornecer aliases de compatibilidade anterior.
     
   - Se novas funcionalidades são adicionadas a essas APIs -- o que é bem
     possível -- elas não irão quebrar ou mudar o significado dos métodos
     existentes. Em outras palavras, "stable" não significa, necessariamente,
     "completo".

   - Se, por alguma razão, uma API declarada "stable" tiver que ser removida ou
     substituída, ela será declarada "deprecated", porém irá permanecer até,
     pelo menos, a versão 1.1. Avisos serão feitos quando um método
     "deprecated" for chamado.

     Veja :ref:`official-releases` para mais detalhes de como a numeração das
     versões do Django funciona, e como as funcionalidades entrarão em desuso.
          
   - Nós somente iremos quebrar a compatibilidade anterior dessas APIs se um
     bug ou uma falha de segurança fizer com que seja completamente inevitável.

APIs "stable"
=============

In general, everything covered in the documentation -- with the exception of
anything in the :ref:`internals area <internals-index>` is considered stable as
of 1.0. This includes these APIs:
Geralmente, tudo que foi documentado -- com excessão de qualquer item da 
:ref:`area interna <internals-index>` é considerado "stable" na versão 1.0. Isto
inclui estas APIs:

    - :ref:`Autorização <topics-auth>`
    
    - :ref:`Caching <topics-cache>`.
    
    - :ref:`Definição de Model, gerenciadores, consultas e transações
      <topics-db-index>`
    
    - :ref:`Envio de e-email <topics-email>`.
    
    - :ref:`Manipulação de arquivos e armazenamento <topics-files>`
    
    - :ref:`Formulários <topics-forms-index>`
    
    - :ref:`Manipulação de requisições/respostas HTTP <topics-http-index>`, 
      incluíndo upload de arquivos, middleware, sessions, resolução de URL, 
      view, e shortcut APIs.
    
    - :ref:`Generic views <topics-http-generic-views>`.

    - :ref:`Internacionalização <topics-i18n>`.
    
    - :ref:`Paginação <topics-pagination>`
    
    - :ref:`Serialização <topics-serialization>`
    
    - :ref:`Signals <topics-signals>`
    
    - :ref:`Templates <topics-templates>`, including the language, Python-level
      :ref:`template APIs <ref-templates-index>`, and :ref:`custom template tags
      and libraries <howto-custom-template-tags>`. We may add new template
      tags in the future and the names may inadvertently clash with
      external template tags. Before adding any such tags, we'll ensure that
      Django raises an error if it tries to load tags with duplicate names.
      
    - :ref:`Testing <topics-testing>`

    - :ref:`Utilitário django-admin <ref-django-admin>`.
    
    - :ref:`Built-in middleware <ref-middleware>`
    
    - :ref:`Objetos request/response <ref-request-response>`.
    
    - :ref:`Settings <ref-settings>`. Note, though that while the :ref:`list of
      built-in settings <ref-settings>` can be considered complete we may -- and
      probably will -- add new settings in future versions. This is one of those
      places where "'stable' does not mean 'complete.'"
      
    - :ref:`Built-in signals <ref-signals>`. Como settings, nós iremos 
      provavelmente adicionar novos sinais no futuro, mas os existentes não 
      devem quebrar.
      
    - :ref:`Manipulação unicode <ref-unicode>`.
        
    - Tudo coberto pelo :ref:`guia HOWTO <howto-index>`.
    
``django.utils``
----------------

Most of the modules in ``django.utils`` are designed for internal use. Only the following parts of ``django.utils`` can be considered stable:

    - ``django.utils.cache``
    - ``django.utils.datastructures.SortedDict`` -- only this single class; the
      rest of the module is for internal use.
    - ``django.utils.encoding``
    - ``django.utils.feedgenerator``
    - ``django.utils.http``
    - ``django.utils.safestring``
    - ``django.utils.translation``
    - ``django.utils.tzinfo``
    
Exceptions
==========

There are a few exceptions to this stability and backwards-compatibility
promise.

Security fixes
--------------

If we become aware of a security problem -- hopefully by someone following our
:ref:`security reporting policy <reporting-security-issues>` -- we'll do
everything necessary to fix it. This might mean breaking backwards compatibility; security trumps the compatibility guarantee.

Contributed applications (``django.contrib``)
---------------------------------------------

While we'll make every effort to keep these APIs stable -- and have no plans to
break any contrib apps -- this is an area that will have more flux between
releases. As the web evolves, Django must evolve with it.

However, any changes to contrib apps will come with an important guarantee:
we'll make sure it's always possible to use an older version of a contrib app if
we need to make changes. Thus, if Django 1.5 ships with a backwards-incompatible
``django.contrib.flatpages``, we'll make sure you can still use the Django 1.4
version alongside Django 1.5. This will continue to allow for easy upgrades.

Historically, apps in ``django.contrib`` have been more stable than the core, so
in practice we probably won't have to ever make this exception. However, it's
worth noting if you're building apps that depend on ``django.contrib``.

APIs marked as internal
-----------------------

Certain APIs are explicitly marked as "internal" in a couple of ways:

    - Some documentation refers to internals and mentions them as such. If the
      documentation says that something is internal, we reserve the right to
      change it.
      
    - Functions, methods, and other objects prefixed by a leading underscore
      (``_``). This is the standard Python way of indicating that something is
      private; if any method starts with a single ``_``, it's an internal API.

