..
.. META INFORMATION OF TRANSLATION
..
..   $TranslationStatus: In Progress $
..   $OriginalRevision: 11268 $
..   $TranslationAuthors: Robson Mendonça $
..
.. INFO OF THIS FILE (DO NOT EDIT! UPDATED BY SUBVERSION)
..
..   $HeadURL$
..   $LastChangedRevision$
..   $LastChangedBy$
..   $LastChangedDate$
..


.. _ref-django-admin:

===========================
django-admin.py e manage.py
===========================

``django-admin.py`` é o utilitário de linha de comando do Django para tarefas
administrativas.

Este documento contempla tudo que ele pode fazer.

Além disso, ``manage.py`` é automaticamente criado em cada projeto Django.
O ``manage.py`` é um wrapper simples a volta do ``django-admin.py`` que se
preocupa com duas coisas por você antes delegar tarefas ao ``django-admin.py``:

    * Ele coloca o pacote do seu projeto no ``sys.path``.

    * Ele seta a variável de ambiente :envvar:`DJANGO_SETTINGS_MODULE` que então
      aponta para o arquivo ``settings.py`` do seu projeto.

O script ``django-admin.py`` deve estar no caminho do seu sistema se você
instalou o Django via o utilitário ``setup.py``. Se não estiver no seu caminho,
você pode encontrá-lo dentro da sua instalação Python em
``site-packages/django/bin``. Considere criar um link simbólico para ele no
caminho do seu sistema, como ``/usr/local/bin``.

Para usuários Windows, que não possuem a funcionalidade de link simbólico
disponível, você pode copiar o ``django-admin.py`` para uma localização do seu
caminho existente ou editar as configurações de ``PATH`` (sob ``Confiurações -
Painel de Controle - Sistema - Avançado - Ambiente...``) para apontar para sua
localização de instalação.

Geralmente, quando se trabalha com um único projeto Django, é mais fácil usar o
``manage.py``. Usar o ``django-admin.py`` com ``DJANGO_SETTINGS_MODULE``, ou a
opção de linha de comando ``--settings``, se você precisar trocar entre vários
arquivos settings do Django.

Os exemplos de linha de comando de toda este documento usa o ``django-admin.py``
para ser consistente, mas qualquer exemplo pode usar ``manage.py`` da mesma
forma.

Uso
===

.. code-block:: bash

    django-admin.py <subcommand> [options]
    manage.py <subcommand> [options]

``subcommand`` deve ser um dos subcomandos listados neste documento.
``options``, que é opcional, deve ser zero ou mais das opções disponíveis para
um dado subcomando.

Obtendo ajuda em tempo de execução
----------------------------------

.. django-admin-option:: --help

Execute ``django-admin.py help`` para mostrar uma lista de todos os subcomandos
disponíveis.
Execute ``django-admin.py help <subcommand>`` para mostrar uma descrição do dado
subcomando e uma lista de suas opções disponíveis.

App names
---------

Muitos subcomandos recebem uma lista de "app names". Um "app name" é o nome
básico do pacote contento seus models. Por exemplo, se sua ``INSTALLED_APPS``
contém a string ``'mysite.blog'``, o "app name" é ``blog``.

Determinando a versão
---------------------

.. django-admin-option:: --version

Execute ``django-admin.py --version`` para mostra a versão atual do Django.

Exemplos de saídas::

    0.95
    0.96
    0.97-pre-SVN-6069

Mostrando saída de debug
------------------------

.. django-admin-option:: --verbosity <amount>

Use ``--verbosity`` para especificar o montante de notificações e informações de
debug que ``django-admin.py`` deve imprimir no console.

    * ``0`` significa nenhuma saída.
    * ``1`` significa saída normal (padrão).
    * ``2`` significa saída prolixa.


Subcomandos disponíveis
=======================

cleanup
-------

.. versionadded:: 1.0

Pode ser executado como um cronjob ou diretamente para limpar dados antigos do
banco de dados (somente sessões expiradas até o momento).

compilemessages
---------------

.. versionchanged:: 1.0
   Antes do 1.0 este era o comando "bin/compile-messages.py".

Compila arquivos .po criados com ``makemessages`` para arquivos .mo para uso
com o suporte embutido ao gettext. Veja :ref:`topics-i18n`.

--locale
~~~~~~~~

Usa as opções ``--locale`` ou ``-l`` para especificar o local para processar.
Se você não especificá-lo, todos os locais são processados.

Exemplo de uso::

    django-admin.py compilemessages --locale=br_PT

createcachetable
----------------

.. django-admin:: createcachetable <tablename>

Creates a cache table named ``tablename`` for use with the database cache
backend. See :ref:`topics-cache` for more information.

createsuperuser
---------------

.. django-admin:: createsuperuser

.. versionadded:: 1.0

Cria uma conta de superusuário (um usuário que tem todas as permissões). Isso é
útil se você precisa criar uma conta inicial de superusuário, mas não o fez
durante o ``syncdb``, ou se você precisa programaticamente gerar contas de
superusuário para seu(s) site(s).

Quando executar interativamente, este comando pedirá uma senha para a nova conta
de super usuário. Quando executá-lo de forma não interativa, nenhuma senha será
setada, e a conta de superusuário não será hábil a logar-se até que uma senha
seja manualmente definida para ele.

.. django-admin-option:: --username
.. django-admin-option:: --email

O nome de usuário e endereço de e-mail para a nova conta podem ser fornecidos
usando os argumentos ``--username`` e ``--email`` na linha de comando. Se cada
um for fornecido, ``createsuperuser`` pedirá por eles quando estiver rodando
interativamente.

Este comando estará disponível somente se o :ref:`sistema de autenticação
<topics-auth>` do Django (``django.contrib.auth``) estiver instalado.

dbshell
-------

.. django-admin:: dbshell

Executa o cliente de linha de comando para o motor de banco de dados na SUA
configuração ``DATABASE_ENGINE``, com os paramêtros de conexão especificados nas
configurações ``DATABASE_USER``, ``DATABASE_PASSWORD``, etc.

    * Para PostgreSQL, este roda o cliente de linha de comando ``psql``.
    * Para MySQL, este roda o cliente de linha de comando ``mysql``.
    * Para SQLite, este roda o cliente de linha de comando ``sqlite3``.

Este comando assume que os programas estão no seu ``PATH``, de modo que uma
simples chamada pelo nome do programa (``psql``, ``mysql``, ``sqlite3``)
encontrará o programa no lugar certo. Não há formas de especificar a localização
do programa manualmente.

diffsettings
------------

.. django-admin:: diffsettings

Mostra diferenças entre as configurações atuais e o padrão do Django.

Configurações que não aparecem por padrão são seguidas por ``"###"``. Por
exemplo, a configuração padrão não define ``ROOT_URLCONF``, então o
``ROOT_URLCONF`` é seguido de ``"###"`` na saída do ``diffsettings``.

Note que o padrão das configurações do Django estão em
``django/conf/global_settings.py``, se você estiver curioso para ver a lista
completa de configurações padrão.

dumpdata
--------

.. django-admin:: dumpdata <appname appname ...>

Mostra na saída padrão todos os dados no banco de dados associado às aplicações
listadas.

Se nenhum nome de aplicação é fornecido, todas as aplicações instaladas serão
extraídas.

A saída de ``dumpdata`` pode ser usada como entrada para ``loaddata``.

Note que ``dumpdata`` usa o gerenciador padrão sobre o model para selecionar os
dados de exportação. Se você estiver usando um :ref:`gerenciador personalizado
<custom-managers>` como o gerenciador padrão e ele filtra algumas entradas
disponíveis, nem todos os objetos serão exportados.

.. django-admin-option:: --exclude

.. versionadded:: 1.0

Excluí uma aplicação específica de aplicações cujo conteúdo é mostrado. Por
exemplo, para especificadamente excluir a aplicação `auth` da exportação,
você deve chamar::

    django-admin.py dumpdata --exclude=auth

Se você deseja excluir várias aplicações, use várias diretivas ``--exclude``::

    django-admin.py dumpdata --exclude=auth --exclude=contenttypes


.. django-admin-option:: --format <fmt>

    Por padrão, ``dumpdata`` formatará sua saída como JSON, mas você pode usar
    a opção ``--format`` para especificar outro formato. Os formatos atualmente
    suportados estão listados em :ref:`serialization-formats`.

.. django-admin-option:: --indent <num>

    Por padrão, ``dumpdata`` exportará todos os dados em uma única linha. Isso
    não é fácil para humanos lerem, então você pode usar a opção ``--indent``
    para imprimir uma bela saída com alguns espaços de indentação.

flush
-----

.. django-admin: flush

Retorna o banco de dados ao estado em que ele estava imediatamente após a
execução do syncdb. Isto significa que todos os dados serão removidos do banco
de dados, quaisquer manipuladores de sincronização posterior, serão
re-executados, e o fixture ``initial_data`` serão re-instalado.

.. django-admin-option:: --noinput

    Use a opção ``--noinput`` para suprimir todo prompt de mensagen para o
    usuário, como mensagens de confirmação. Isso é útil se o ``django-admin.py``
    é executado como um script autônomo.

inspectdb
---------

Instrospecta as tabelas do banco de dados apontado pela configuração
``DATABASE_NAME`` e mostra um módulo de model do Django (um arquivo
``models.py``) na saída padrão.

Use isso se você tem um banco de dados legado com o qual você gostaria de usar
o Django. O script irá inspecionar o banco de dados e criar um model para cada
tabela dentro dele.

Como você pode experar, os models criados terão um atributo para todos os campos
da tabela. Note que ``inspectdb`` tem uns poucos casos especiais em sua saída de
nomes de campos:

    * Se ``inspectdb`` não mapear um tipo de coluna para o tipo de campo do
      model, ele usará um ``TextField`` e inserirá um comentário Python
      ``'This field type is a guess'`` (traduzindo, ``'Este tipo de campo é uma
      advinhação'``.) próximo ao campo gerado no model.

    * Se o nome da coluna do banco de dados é uma palavra reservada do Python (
      tipo ``'pass'``, ``'class'`` ou ``'for'``), o ``inspectdb`` atachará
      ``'_field'`` ao nome do atributo. Por exemplo, se uma tabela tem uma
      coluna ``'for'``, o model gerado terá um campo ``'for_field'``, com o
      atributo ``db_column`` setado para ``'for'``. O ``inspectdb`` inserirá o
      comentário Python
      ``'Field renamed because it was a Python reserved word'`` (traduzindo,
      ``'Campo renomeado porque é uma palavra reservada do Python'``) próximo ao
      campo.

Esta funcionalidade é para ser um atalho, não um gerador de models definitivo.
Depois que você rodá-la, você precisar mexer nos models você mesmo para fazer
personalizações. Em particular, você precisará rearranjar a ordem dos models,
desta forma os models que são referenciados por outros, funcinoarão
apropriadamente.

Chaves primárias são automaticamente introspectadas no PostgreSQL, MySQL e
SQLite, nestes casos o Django coloca ``primary_key=True`` onde for necessário.

O ``inspectedb`` trabalha com PostgreSQL, MySQL e SQLite. Detecção de chaves
estrangeiras somente funcionam no PostgreSQL e com certos tipos de tabelas do
MySQL.

loaddata <fixture fixture ...>
------------------------------

Procura e carrega os conteúdos de fixtures para dentro do banco de dados.

Um *fixture* é uma coleção de arquivos que contém os conteúdos serializados do
banco de dados. Cada fixture tem um nome único, e os arquivos que compreendem
aos fixtures podem estar distribuídos em vários diretório, em várias aplicações.

O Django procurará em três lugares por fixtures:

   1. No diretório ``fixtures`` de cada aplicação instalada
   2. Em qualquer diretório encontrado na configuração ``FIXTURE_DIRS``
   3. No caminho literal nomeado para o fixture

O Django carregará qualquer e todos os fixtures que encontrar, nos lugares que
combinarem com os nomes de fixtures fornecidos.

Se o fixture nomeado tem uma extensão de arquivo, somente fixtures daquele tipo
serão carregados. Por exemplo::

    django-admin.py loaddata mydata.json

poderia somente carregar fixtures JSON chamados ``mydata``. A extensão do
fixture deve corresponder ao nome registrado do serializador (e.g., ``json`` ou
``xml``).

Se você omitir a extensão, o Django procurará todos os tipos de fixtures
disponíveis até encontrar uma combinação. Por exemplo::

    django-admin.py loaddata mydata

poderia procurar por qualquer fixture de qualquer tipo chamado ``mydata``. Se um
diretório de fixture contendo ``mydata.json``, cujo a fixture poderia ser
carregada como uma fixture JSON. Entretanto, se duas fixtures com o mesmo nome
mas tipos diferentes forem descobertas (por exemplo, se ``mydata.json`` e
``mydata.xml`` fossem encontradas em algum diretório de fixtures), a instalação
do fixtures será abortada, e qualquer dado instalado na chamada do ``loaddata``
será removido do banco de dados.

Os fixtures que são nomeado pode incluir diretório de componentes. Estes
diretórios serão incluídos no caminho de busca. Por exemplo::

    django-admin.py loaddata foo/bar/mydata.json

poderia procurar ``<appname>/fixtures/foo/bar/mydata.json`` para cada aplicação
instalada, ``<dirname>/foo/bar/mydata.json`` para cada diretório no
``FIXTURE_DIRS``, e o caminho literal  ``foo/bar/mydata.json``.

Quando arquivos fixture são processados, os dados são salvos no banco de dados
como estão. O método ``save`` do model definido e o sinal ``pre_save`` não são
chamados.

Note que a ordem em que os arquivos de fixtures são processados é indefinida.
Entretanto, todos os dados são instalados como uma transação única, então, dados
de uma fixture podem referenciar dados de outra fixture. Se o beckend de banco
de dados suporta constrains a nível de linha, estes constraints serão checados
no final da transação.

O comando ``dumbdata`` pode ser usado para gerar entrada para ``loaddata``.

.. admonition:: MySQL and Fixtures

    Infelizmente, o MySQL não é capaz de suportar completamente todas as
    funcionalidades dos fixtures do Django. Se você usa tabelas MyISAM, o MySQL
    não suporta transações ou constraints, então você não pode fazer um rollback
    se vários arquivos de transação são encontrados, ou fixtures com dados de
    validação.Se você usa tabelas InnoDB, você não poderá ter qualquer
    referência nos seus arquivos de dados - o MySQL não provê um mecanismo para
    diferir checagens de constraints de linhas até que uma transação seja
    comitada.

--verbosity
~~~~~~~~~~~

User ``--verbosity`` para especificar o quanto de notificações e informações de
debug o ``django-admin.py`` deverá imprimir no console.

	* ``0`` significa nenhuma saída.
	* ``1`` significa saída normal (padrão).
	* ``2`` significa saída prolixa.

Exemplo de uso::

    django-admin.py loaddata --verbosity=2

makemessages
------------

.. versionchanged:: 1.0
   Before 1.0 this was the ``bin/make-messages.py`` command.

Runs over the entire source tree of the current directory and pulls out all
strings marked for translation. It creates (or updates) a message file in the
conf/locale (in the django tree) or locale (for project and application)
directory. After making changes to the messages files you need to compile them
with ``compilemessages`` for use with the builtin gettext support. See the
:ref:`i18n documentation <how-to-create-language-files>` for details.

--all
~~~~~

Use as opções ``--all`` ou ``-a`` para atualizar os arquivos de mensagens para
todas os idiomas disponíveis.

Exemplo de uso::

    django-admin.py makemessages --all

--extension
~~~~~~~~~~~

Use as opções ``--extension`` ou ``-e`` para especificar uma lista de extensões
de arquivos para examinar (padrão: ".html").

Exemplo de uso::

    django-admin.py makemessages --locale=de --extension xhtml

Separe as várias extensões com vírgulas ou usando -e ou --extension várias
vezes::

    django-admin.py makemessages --locale=de --extension=html,txt --extension xml

--locale
~~~~~~~~

Use as opções ``--locale`` ou ``-l`` para especificar o local do processo.

Exemplo de uso::

    django-admin.py makemessages --locale=br_PT

--domain
~~~~~~~~

Use as opções ``--domain`` ou ``-d`` para mudar o domínio dos arquivos de
mensagens. Atualmente são suportados:

	* ``django`` para todo arquivo ``*.py`` e ``*.html`` (padrão)
	* ``djangojs`` para arquivos ``*.js``

--verbosity
~~~~~~~~~~~

User ``--verbosity`` para especificar o quanto de notificações e informações de
debug o ``django-admin.py`` deverá imprimir no console.

	* ``0`` significa nenhuma saída.
	* ``1`` significa saída normal (padrão).
	* ``2`` significa saída prolixa.

Exemplo de uso::

    django-admin.py loaddata --verbosity=2

reset <appname appname ...>
---------------------------

Executa o equivalente a ``sqlreset`` para uma app específica.

--noinput
~~~~~~~~~

Use a opção ``--noinput`` para suprimir todo prompt ao usuário, como mensagens
de confirmação "Are you sure?". Isso é útil se o ``django-admin.py`` for
executado de forma autônoma, por um script.

runfcgi [options]
-----------------

Inicia um conjunto de processos FastCGI adequados para uso com qualquer servidor
Web que suporta o protocolo FastCGI. Veja a :ref:`documentação de implantação no
FastCGI <howto-deployment-fastcgi>` para detalhes. Requer o módulo FastCGI do
Python `flup`_.

.. _flup: http://www.saddi.com/software/flup/

runserver
---------

.. django-admin:: runserver [port or ipaddr:port]


Inicia um servidor Web leve de desenvolvimento na máquina local. Por padrão,
o servidor roda na porta 8000 no endereço IP 127.0.0.1. Você pode passar um
endereço IP e uma porta explicitamente.

Se você executar este script como um usuário com privilégios normais
(recomendado), você pode não ter permissão para poder iniciar o servidor numa
por de número baixo. Portas de números baixos são reservadas ao super-usuário
(root).

NÃO SE ESTE SERVIDOR EM AMBIENTE DE PRODUÇÃO. Ele não passou por auditorias de
segurança ou testes de desempenho. (E isso vai ficar como está. Nosso negócio é
fazer um framework Web, não servidores Web, portanto, improvisar este servidor
para torná-lo usável em ambiente de produção está fora do escopo do Django.)

O servidor de desenvolvimento recarrega o código Python a cada request, se
necessário. Você não precisa reiniciá-lo para que mudanças no código tenham
efeito.

Quando iniciar o servidor, a cada vez que você mudar o código Python enquanto
ele estiver rodando, o servidor validará todos os seus models instalados. (Veja
o comando ``validate`` abaixo.) SE o validador encontrar erros, ele os imprimirá
na saída padrão, mas não parará o servidor.

Você pode rodar quantos servidores você quiser, desde que estejam em portas
separadas. É só executar ``django-admin.py runserver`` mais de uma vez.

Note que o endereço IP padrão, 127.0.0.1, não é acessível para outros
computadores de sua rede. Para ter seu servidor de desenvolvimento visível por
outros na rede, use seu próprio endereço IP (e.g. ``192.168.2.1``) ou
``0.0.0.0``.

.. django-admin-option:: --adminmedia

Use a opção ``--adminmedia`` para dizer ao Django onde encontrar os vários
arquivos CSS e JavaScript da interface de administração do Django. Normalmente,
o servidor de desenvolvimento serve estes arquivos da árvore de código do Django
magicamente, mas você pode querer usar isso, caso tenha feito quaisquer mudanças
nos arquivos para seu próprio site.

Exemplo de uso::

    django-admin.py runserver --adminmedia=/tmp/new-admin-style/

.. django-admin-option:: --noreload

Use a opção ``--noreload`` para desabilitar o uso do auto-reloader. Isso
significa que quaisquer mudanças no código Python, feitas enquanto o servidor
estiver rodando, não terá efeito se o módulo em particular já foi carregado na
memória.

Exemplo de uso::

    django-admin.py runserver --noreload

Exemplos de uso com diferentes portas e endereços
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Porta 8000 no endereço IP 127.0.0.1::

	django-admin.py runserver

Porta 8000 no endereço IP 1.2.3.4::

	django-admin.py runserver 1.2.3.4:8000

Porta 7000 no endereço IP 127.0.0.1::

    django-admin.py runserver 7000

Porta 7000 no endereço IP 1.2.3.4::

    django-admin.py runserver 1.2.3.4:7000

Servindo arquivos estáticos com o servidor de desenvolvimento
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Por padrão, o servidor de desenvolvimento não serve quaisquer arquivos estáticos
para o site (como arquivos CSS, imagens, coisas sob o ``MEDIA_URL``, etc). Se
você deseja configurar o Django para servir arquivos de mídia estáticos, leia
:ref:`howto-static-files`.

shell
-----

Começa o interpretador Python interativo.

O Django usará o IPython_, se ele estiver instalado. Se você tem o IPython
instalado e quer forçar o uso do interpretador Python "plano", use a opção
``--plain``, desta forma::

    django-admin.py shell --plain

.. _IPython: http://ipython.scipy.org/

sql <appname appname ...>
-------------------------

Imprime a consulta SQL CREATE TABLE para os nomes de apps dados.

sqlall <appname appname ...>
----------------------------

Imprime as consultas sql CREATE TABLE  e initial-data, para os nomes das apps
dados.

Leia a descrição de ``sqlcustom`` para uma explicação de como especificar dados
iniciais.

sqlclear <appname appname ...>
------------------------------

Imprime a consulta SQL DROP TABLE para o nome dado de aplicação.

sqlcustom <appname appname ...>
-------------------------------

Imprime a consulta SQL para o nome dado de aplicação.

Para cada model em cada app especificada, este comando procura pelo arquivo
``<appname>/sql/<modelname>.sql``, onde ``<appname>`` é o nome dado da aplicação
``<modelname>`` é o nome do model em minúsculo. Por exemplo, se você tem uma app
``news`` que inclui um model ``Story``, o ``sqlcustom`` tentará ler o arquivo
``news/sql/story.sql`` e adicioná-lo à saída deste comando.

Cada arquivo SQL, se dado, é esperado que contenha SQL válido. Os arquivos SQL
são entubados diretamente dentro do banco de dados depois que todos as consultas
de criação de tabelas foram executadas. use este hook SQL para fazer quaisquer
modificações em tabelas, ou inserir qualquer função SQL dentro do banco de
dados.

Note que a ordem em que os arquivos SQL são processados é indefinida.

sqlflush
--------

Imprime a consulta SQL que deveria ser executada para o comando `flush`_.

sqlindexes <appname appname ...>
--------------------------------

Imprime a consulta SQL CREATE INDEX SQL para uma certa app dada pelo nome.

sqlreset <appname appname ...>
------------------------------

Imprime a consulta SQL DROP TABLE, e então o SQL CREATE TABLE, para uma certa
app dada pelo nome.

sqlsequencereset <appname appname ...>
--------------------------------------

Imprime a consulta SQL para resetar sequencias de certas apps dadas pelo nome.

Sequências são indíces usados por alguns bancos de dados para rastrear o próximo
número disponível automaticamente, em campos incrementais.

Use este comando para gerar SQL que consertará casos onde a sequência está fora
de sincronia com seus campos auto incrementados.

startapp <appname>
------------------

Cria uma estrutura de diretório de aplicação Django com o nome fornecido, no
diretório atual.

startproject <projectname>
--------------------------

Cria uma estrutura de diretório de projeto Django com o nome fornecido, no
diretório atual.

Este comando é desabilitado quando a opção ``--settings`` para o
``django-admin.py`` é usado, ou quando a variável de ambiente
``DJANGO_SETTINGS_MODULE`` estiver setada. Para re-habilitá-lo nestas situações,
deve-se omitir a opção ``--settings`` ou anular o ``DJANGO_SETTINGS_MODULE``.

syncdb
------

Creates the database tables for all apps in ``INSTALLED_APPS`` whose tables
have not already been created.

Use this command when you've added new applications to your project and want to
install them in the database. This includes any apps shipped with Django that
might be in ``INSTALLED_APPS`` by default. When you start a new project, run
this command to install the default apps.

.. admonition:: Syncdb will not alter existing tables

   ``syncdb`` will only create tables for models which have not yet been
   installed. It will *never* issue ``ALTER TABLE`` statements to match
   changes made to a model class after installation. Changes to model classes
   and database schemas often involve some form of ambiguity and, in those
   cases, Django would have to guess at the correct changes to make. There is
   a risk that critical data would be lost in the process.

   If you have made changes to a model and wish to alter the database tables
   to match, use the ``sql`` command to display the new SQL structure and
   compare that to your existing table schema to work out the changes.

If you're installing the ``django.contrib.auth`` application, ``syncdb`` will
give you the option of creating a superuser immediately.

``syncdb`` will also search for and install any fixture named ``initial_data``
with an appropriate extension (e.g. ``json`` or ``xml``). See the
documentation for ``loaddata`` for details on the specification of fixture
data files.

--verbosity
~~~~~~~~~~~

Use ``--verbosity`` to specify the amount of notification and debug information
that ``django-admin.py`` should print to the console.

	* ``0`` means no output.
	* ``1`` means normal output (default).
	* ``2`` means verbose output.

Exemplo de uso::

    django-admin.py syncdb --verbosity=2

--noinput
~~~~~~~~~

Use the ``--noinput`` option to suppress all user prompting, such as
"Are you sure?" confirmation messages. This is useful if ``django-admin.py``
is being executed as an unattended, automated script.

test
----

Runs tests for all installed models. See :ref:`topics-testing` for more
information.

--noinput
~~~~~~~~~

Use the ``--noinput`` option to suppress all user prompting, such as
"Are you sure?" confirmation messages. This is useful if ``django-admin.py``
is being executed as an unattended, automated script.

--verbosity
~~~~~~~~~~~

Use ``--verbosity`` to specify the amount of notification and debug information
that ``django-admin.py`` should print to the console.

	* ``0`` means no output.
	* ``1`` means normal output (default).
	* ``2`` means verbose output.

Exemplo de uso::

    django-admin.py test --verbosity=2

testserver <fixture fixture ...>
--------------------------------

.. versionadded:: 1.0

Runs a Django development server (as in ``runserver``) using data from the
given fixture(s).

For example, this command::

    django-admin.py testserver mydata.json

...would perform the following steps:

    1. Create a test database, as described in :ref:`topics-testing`.
    2. Populate the test database with fixture data from the given fixtures.
       (For more on fixtures, see the documentation for ``loaddata`` above.)
    3. Runs the Django development server (as in ``runserver``), pointed at
       this newly created test database instead of your production database.

This is useful in a number of ways:

    * When you're writing :ref:`unit tests <topics-testing>` of how your views
      act with certain fixture data, you can use ``testserver`` to interact with
      the views in a Web browser, manually.

    * Let's say you're developing your Django application and have a "pristine"
      copy of a database that you'd like to interact with. You can dump your
      database to a fixture (using the ``dumpdata`` command, explained above),
      then use ``testserver`` to run your Web application with that data. With
      this arrangement, you have the flexibility of messing up your data
      in any way, knowing that whatever data changes you're making are only
      being made to a test database.

Note that this server does *not* automatically detect changes to your Python
source code (as ``runserver`` does). It does, however, detect changes to
templates.

--addrport [port number or ipaddr:port]
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Use ``--addrport`` to specify a different port, or IP address and port, from
the default of 127.0.0.1:8000. This value follows exactly the same format and
serves exactly the same function as the argument to the ``runserver`` subcommand.

Examples:

To run the test server on port 7000 with ``fixture1`` and ``fixture2``::

    django-admin.py testserver --addrport 7000 fixture1 fixture2
    django-admin.py testserver fixture1 fixture2 --addrport 7000

(The above statements are equivalent. We include both of them to demonstrate
that it doesn't matter whether the options come before or after the fixture
arguments.)

To run on 1.2.3.4:7000 with a ``test`` fixture::

    django-admin.py testserver --addrport 1.2.3.4:7000 test

--verbosity
~~~~~~~~~~~

Use ``--verbosity`` to specify the amount of notification and debug information
that ``django-admin.py`` should print to the console.

	* ``0`` means no output.
	* ``1`` means normal output (default).
	* ``2`` means verbose output.

Exemplo de uso::

    django-admin.py testserver --verbosity=2

validate
--------

Validates all installed models (according to the ``INSTALLED_APPS`` setting)
and prints validation errors to standard output.

Default options
===============

Although some subcommands may allow their own custom options, every subcommand
allows for the following options:

--pythonpath
------------

Exemplo de uso::

    django-admin.py syncdb --pythonpath='/home/djangoprojects/myproject'

Adds the given filesystem path to the Python `import search path`_. If this
isn't provided, ``django-admin.py`` will use the ``PYTHONPATH`` environment
variable.

Note that this option is unnecessary in ``manage.py``, because it takes care of
setting the Python path for you.

.. _import search path: http://diveintopython.org/getting_to_know_python/everything_is_an_object.html

--settings
----------

Exemplo de uso::

    django-admin.py syncdb --settings=mysite.settings

Explicitly specifies the settings module to use. The settings module should be
in Python package syntax, e.g. ``mysite.settings``. If this isn't provided,
``django-admin.py`` will use the ``DJANGO_SETTINGS_MODULE`` environment
variable.

Note that this option is unnecessary in ``manage.py``, because it uses
``settings.py`` from the current project by default.

--traceback
-----------

Exemplo de uso::

    django-admin.py syncdb --traceback

By default, ``django-admin.py`` will show a simple error message whenever an
error occurs. If you specify ``--traceback``, ``django-admin.py``  will
output a full stack trace whenever an exception is raised.

Extra niceties
==============

Syntax coloring
---------------

The ``django-admin.py`` / ``manage.py`` commands that output SQL to standard
output will use pretty color-coded output if your terminal supports
ANSI-colored output. It won't use the color codes if you're piping the
command's output to another program.

Bash completion
---------------

If you use the Bash shell, consider installing the Django bash completion
script, which lives in ``extras/django_bash_completion`` in the Django
distribution. It enables tab-completion of ``django-admin.py`` and
``manage.py`` commands, so you can, for instance...

    * Type ``django-admin.py``.
    * Press [TAB] to see all available options.
    * Type ``sql``, then [TAB], to see all available options whose names start
      with ``sql``.



See :ref:`howto-custom-management-commands` for how to add customized actions.

