..
.. META INFORMATION OF TRANSLATION
..
..   $TranslationStatus: Done, waiting for revision. $
..   $OriginalRevision: 11348 $
..   $TranslationAuthors: Felipe Zorzo $
..
.. INFO OF THIS FILE (DO NOT EDIT! UPDATED BY SUBVERSION)
..
..   $HeadURL$
..   $LastChangedRevision$
..   $LastChangedBy$
..   $LastChangedDate$
..


.. _ref-contrib-index:

===========================
Os add-ons "django.contrib"
===========================

O Django procura seguir a filosofia Python das `"baterias incluídas"`_. Ele vem
com uma variedade de extras, ferramentas opcionais que resolvem os problemas
comuns ao desenvolvimento web.

O código está em ``django/contrib`` na distribuição do Django. Este documento
apresenta um resumo dos pacotes ``contrib``, juntamente com as suas possíveis
dependências.

.. admonition:: Nota

    A maioria desses add-ons -- especificamente, os add-ons que incluem
    models ou template tags -- você precisará adicionar o nome do pacote (e.x.,
    ``'django.contrib.admin'``) a sua configuração ``INSTALLED_APPS`` e executar
    ``manage.py syncdb``.

.. _"baterias incluídas": http://docs.python.org/tut/node12.html#batteries-included

.. toctree::
   :maxdepth: 1

   admin
   auth
   comments/index
   contenttypes
   csrf
   databrowse
   flatpages
   formtools/index
   humanize
   localflavor
   redirects
   sitemaps
   sites
   syndication
   webdesign

admin
=====

A interface administrativa automática do Django. Para mais informações, veja
:ref:`Tutorial 2 <intro-tutorial02>` e a
:ref:`documentação do admin <ref-contrib-admin>`.

Precisa que os pacotes contrib auth_ e contenttypes_ estejam instalados.

auth
====

O framework de autenticação do Django.

Veja :ref:`topics-auth`.

comments
========

.. versionchanged:: 1.0
   O aplicativo de comentários foi reescrito. Veja :ref:`ref-contrib-comments-upgrade`
   para informações sobre como atualizar seu código.

Um simples e flexível sistema de comentários. Veja :ref:`ref-contrib-comments-index`.

contenttypes
============

Um framework leve para a conexão de "tipos" de conteúdo, onde cada model
Django instalado é um tipo de coneteúdo diferente.

Veja a :ref:`documentação do contenttypes <ref-contrib-contenttypes>`.

csrf
====

Um middleware para prevenir Cross Site Request Forgeries.

Veja a :ref:`documentação csrf <ref-contrib-csrf>`.

flatpages
=========

Um framework para gerenciar simples conteúdo HTML "planos" no banco de dados.

Veja a :ref:`documentação flatpages <ref-contrib-flatpages>`.

Precisa que o pacote contrib sites_ seja instalado também.

formtools
=========

Um conjunto de abstrações de alto nível para os forms Django (django.forms).

django.contrib.formtools.preview
--------------------------------

Uma abstração para o seguinte fluxo:

"Exibe um formulário HTML, força um preview, então faça algo com a submissão."

Veja a :ref:`documentação do form preview <ref-contrib-formtools-form-preview>`.

django.contrib.formtools.wizard
--------------------------------

Divide um form em várias páginas.

Veja a :ref:`documentação do assistente de formulários <ref-contrib-formtools-form-wizard>`.

humanize
========

Um conjunto de template filters úteis para adicionar um "toque humano" aos dados.

Veja a :ref:`documentação do humanize <ref-contrib-humanize>`.

localflavor
===========

Uma coleção de vários snippets que são úteis somente para um
país ou cultura. Por exemplo, ``django.contrib.localflavor.us.forms``
contém um ``USZipCodeField`` que você pode usar para validar zip codes dos 
Estado Unidos.

Veja a :ref:`documentação localflavor <ref-contrib-localflavor>`.

.. _ref-contrib-markup:

markup
======

Uma coleção de template filters que implementam as linguagens de marcação mais
comuns:

    * ``textile`` -- implementa `Textile`_
    * ``markdown`` -- implementa `Markdown`_
    * ``restructuredtext`` -- implementa `ReST (ReStructured Text)`_

Em cada caso, o filtro espera por uma marcação formatada como string e retorna
uma string representando o texto processado. Por exemplo, o filtro ``textile``
converte texto escrito no formato Textile em HTML.

Para ativar esses filtros, adicione ``'django.contrib.markup'`` às suas
:setting:`INSTALLED_APPS`. Uma vez adicionado, use ``{% load markup %}`` em
um template, e você terá acesso à esses filtros. Para mais documentação,
leia o código fonte em django/contrib/markup/templatetags/markup.py.

.. _Textile: http://en.wikipedia.org/wiki/Textile_%28markup_language%29
.. _Markdown: http://en.wikipedia.org/wiki/Markdown
.. _ReST (ReStructured Text): http://en.wikipedia.org/wiki/ReStructuredText

redirects
=========

Um framework para gerenciar redirecionamentos.

Veja a :ref:`documentação de redirects <ref-contrib-redirects>`.

sessions
========

Um framework para armazenar dados em sessões anônimas.

Veja a :ref:`documentação de sessões <topics-http-sessions>`.

sites
=====

Um framework leve que permite que você gerencie múltiplos web sites no mesmo
banco de dados e instalação do Django. Ele te dá ganchos para associar objetos a
um ou mais sites.

Veja a :ref:`documentação de sites <ref-contrib-sites>`.

sitemaps
========

Um framework para gerar arquivos XML no formato de sitemap do Google.

Veja a :ref:`documentação de sitemaps <ref-contrib-sitemaps>`.

syndication
===========

Um framework para gerar feed, em RSS e Atom, facilmente.

Veja a :ref:`documentação do syndication <ref-contrib-syndication>`.

webdesign
=========

Ajudantes que são particularmente úteis à web *designers*, e não
desenvolvedores web.

Veja a :ref:`documentação dos ajudantes de web design <ref-contrib-webdesign>`.

Outros add-ons
==============

Se você tem uma idéia de funcionalidade para incluir no ``contrib``, nos conte!
Codifique-a e poste na `django-users mailing list`_.

.. _django-users mailing list: http://groups.google.com/group/django-users
