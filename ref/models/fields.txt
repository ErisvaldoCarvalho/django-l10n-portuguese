..
.. META INFORMATION OF TRANSLATION
..
..   $TranslationStatus: In Progress $
..   $OriginalRevision: 11268 $
..   $TranslationAuthors: Walter Cruz, Robson Mendonça $
..
.. INFO OF THIS FILE (DO NOT EDIT! UPDATED BY SUBVERSION)
..
..   $HeadURL$
..   $LastChangedRevision$
..   $LastChangedBy$
..   $LastChangedDate$
..


.. _ref-models-fields:

=============================
Referência de campos do Model
=============================

.. module:: django.db.models.fields
   :synopsis: Tipos de campos embutidos.

.. currentmodule:: django.db.models

Este documento contém todos os detalhes sobre todas as `opções dos campos`_ e
`tipos de campos`_ que o Django oferece.

.. seealso::

    Se os campos embutidos não atendem a sua necessidade, você pode facilmente
    :ref:`escrever seus próprios campos de model <howto-custom-model-fields>`.

.. note::

    Tecnicamente, estes models são definidos em :mod:`django.db.models.fields`,
    mas por conveniência eles são importados dentro do :mod:`django.db.models`;
    a convenção padrão é usar ``from django.db import models`` e referir-se aos
    campos como ``models.<Foo>Field``.

.. _common-model-field-options:

Opções dos campos
=================

The following arguments are available to all field types. All are optional.

``null``
--------

.. attribute:: Field.null

If ``True``, Django will store empty values as ``NULL`` in the database. Default
is ``False``.

Note that empty string values will always get stored as empty strings, not as
``NULL``. Only use ``null=True`` for non-string fields such as integers,
booleans and dates. For both types of fields, you will also need to set
``blank=True`` if you wish to permit empty values in forms, as the
:attr:`~Field.null` parameter only affects database storage (see
:attr:`~Field.blank`).

Avoid using :attr:`~Field.null` on string-based fields such as
:class:`CharField` and :class:`TextField` unless you have an excellent reason.
If a string-based field has ``null=True``, that means it has two possible values
for "no data": ``NULL``, and the empty string. In most cases, it's redundant to
have two possible values for "no data;" Django convention is to use the empty
string, not ``NULL``.

.. note::

    When using the Oracle database backend, the ``null=True`` option will be
    coerced for string-based fields that have the empty string as a possible
    value, and the value ``NULL`` will be stored to denote the empty string.

``blank``
---------

.. attribute:: Field.blank

If ``True``, the field is allowed to be blank. Default is ``False``.

Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is
purely database-related, whereas :attr:`~Field.blank` is validation-related. If
a field has ``blank=True``, validation on Django's admin site will allow entry
of an empty value. If a field has ``blank=False``, the field will be required.

``choices``
-----------

.. attribute:: Field.choices

An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this
field.

If this is given, Django's admin will use a select box instead of the standard
text field and will limit choices to the choices given.

A choices list looks like this::

    YEAR_IN_SCHOOL_CHOICES = (
        ('FR', 'Freshman'),
        ('SO', 'Sophomore'),
        ('JR', 'Junior'),
        ('SR', 'Senior'),
        ('GR', 'Graduate'),
    )

The first element in each tuple is the actual value to be stored. The second
element is the human-readable name for the option.

The choices list can be defined either as part of your model class::

    class Foo(models.Model):
        GENDER_CHOICES = (
            ('M', 'Male'),
            ('F', 'Female'),
        )
        gender = models.CharField(max_length=1, choices=GENDER_CHOICES)

or outside your model class altogether::

    GENDER_CHOICES = (
        ('M', 'Male'),
        ('F', 'Female'),
    )
    class Foo(models.Model):
        gender = models.CharField(max_length=1, choices=GENDER_CHOICES)

You can also collect your available choices into named groups that can
be used for organizational purposes::

    MEDIA_CHOICES = (
        ('Audio', (
                ('vinyl', 'Vinyl'),
                ('cd', 'CD'),
            )
        ),
        ('Video', (
                ('vhs', 'VHS Tape'),
                ('dvd', 'DVD'),
            )
        ),
        ('unknown', 'Unknown'),
    )

The first element in each tuple is the name to apply to the group. The
second element is an iterable of 2-tuples, with each 2-tuple containing
a value and a human-readable name for an option. Grouped options may be
combined with ungrouped options within a single list (such as the
`unknown` option in this example).

For each model field that has :attr:`~Field.choices` set, Django will add a
method to retrieve the human-readable name for the field's current value. See
:meth:`~django.db.models.Model.get_FOO_display` in the database API
documentation.

Finally, note that choices can be any iterable object -- not necessarily a list
or tuple. This lets you construct choices dynamically. But if you find yourself
hacking :attr:`~Field.choices` to be dynamic, you're probably better off using a
proper database table with a :class:`ForeignKey`. :attr:`~Field.choices` is
meant for static data that doesn't change much, if ever.

``db_column``
-------------

.. attribute:: Field.db_column

The name of the database column to use for this field. If this isn't given,
Django will use the field's name.

If your database column name is an SQL reserved word, or contains
characters that aren't allowed in Python variable names -- notably, the
hyphen -- that's OK. Django quotes column and table names behind the
scenes.

``db_index``
------------

.. attribute:: Field.db_index

If ``True``, djadmin:`django-admin.py sqlindexes <sqlindexes>` will output a
``CREATE INDEX`` statement for this field.

``db_tablespace``
-----------------

.. attribute:: Field.db_tablespace

.. versionadded:: 1.0

The name of the database tablespace to use for this field's index, if this field
is indexed. The default is the project's :setting:`DEFAULT_INDEX_TABLESPACE`
setting, if set, or the :attr:`~Field.db_tablespace` of the model, if any. If
the backend doesn't support tablespaces, this option is ignored.

``default``
-----------

.. attribute:: Field.default

The default value for the field. This can be a value or a callable object. If
callable it will be called every time a new object is created.

``editable``
------------

.. attribute:: Field.editable

If ``False``, the field will not be editable in the admin or via forms
automatically generated from the model class. Default is ``True``.

``help_text``
-------------

.. attribute:: Field.help_text

Extra "help" text to be displayed under the field on the object's admin form.
It's useful for documentation even if your object doesn't have an admin form.

Note that this value is *not* HTML-escaped when it's displayed in the admin
interface. This lets you include HTML in :attr:`~Field.help_text` if you so
desire. For example::

    help_text="Please use the following format: <em>YYYY-MM-DD</em>."

Alternatively you can use plain text and
``django.utils.html.escape()`` to escape any HTML special characters.

``primary_key``
---------------

.. attribute:: Field.primary_key

If ``True``, this field is the primary key for the model.

If you don't specify ``primary_key=True`` for any fields in your model, Django
will automatically add an :class:`IntegerField` to hold the primary key, so you
don't need to set ``primary_key=True`` on any of your fields unless you want to
override the default primary-key behavior. For more, see
:ref:`automatic-primary-key-fields`.

``primary_key=True`` implies :attr:`null=False <Field.null>` and :attr:`unique=True <Field.unique>`.
Only one primary key is allowed on an object.

``unique``
----------

.. attribute:: Field.unique

If ``True``, this field must be unique throughout the table.

This is enforced at the database level and at the Django admin-form level. If
you try to save a model with a duplicate value in a :attr:`~Field.unique`
field, a :exc:`django.db.IntegrityError` will be raised by the model's
:meth:`~django.db.models.Model.save` method.

This option is valid on all field types except :class:`ManyToManyField` and
:class:`FileField`.

``unique_for_date``
-------------------

.. attribute:: Field.unique_for_date

Set this to the name of a :class:`DateField` or :class:`DateTimeField` to
require that this field be unique for the value of the date field.

For example, if you have a field ``title`` that has
``unique_for_date="pub_date"``, then Django wouldn't allow the entry of two
records with the same ``title`` and ``pub_date``.

This is enforced at the Django admin-form level but not at the database level.

``unique_for_month``
--------------------

.. attribute:: Field.unique_for_month

Like :attr:`~Field.unique_for_date`, but requires the field to be unique with
respect to the month.

``unique_for_year``
-------------------

.. attribute:: Field.unique_for_year

Like :attr:`~Field.unique_for_date` and :attr:`~Field.unique_for_month`.

``verbose_name``
-------------------

.. attribute:: Field.verbose_name

A human-readable name for the field. If the verbose name isn't given, Django
will automatically create it using the field's attribute name, converting
underscores to spaces. See :ref:`Verbose field names <verbose-field-names>`.

.. _model-field-types:

Tipos de campos
===============

.. currentmodule:: django.db.models

``AutoField``
-------------

.. class:: AutoField(**options)

Um :class:`IntegerField` que incrementa seu valor automaticamente de acordo com os
IDs disponíveis. Você normalmente não precisa usá-lo diretamente; um campo de
chave primária será automaticamente adicionado ao seu modelo se você não
especificar um. Veja :ref:`automatic-primary-key-fields`.

``BooleanField``
----------------

.. class:: BooleanField(**options)

Um campo Verdadeiro/Falso.

O site administrativo representa-o como uma checkbox.

.. admonition:: MySQL users..

    A boolean field in MySQL is stored as a ``TINYINT`` column with a value of
    either 0 or 1 (most databases have a proper ``BOOLEAN`` type instead). So,
    for MySQL, only, when a ``BooleanField`` is retrieved from the database
    and stored on a model attribute, it will have the values 1 or 0, rather
    than ``True`` or ``False``. Normally, this shouldn't be a problem, since
    Python guarantees that ``1 == True`` and ``0 == False`` are both true.
    Just be careful if you're writing something like ``obj is True`` when
    ``obj`` is a value from a boolean attribute on a model. If that model was
    constructed using the ``mysql`` backend, the "``is``" test will fail.
    Prefer an equality test (using "``==``") in cases like this.

``CharField``
-------------

.. class:: CharField(max_length=None, [**options])

Um campo string, para campos texto de tamanhos pequeno e médio.

Para grandes quantidades de texto, use :class:`django.db.models.TextField`.

A administração representa-o como um ``<input type="text">`` (um input de uma
única linha).

:class:`CharField` tem um argumento extra obrigatório:

.. attribute:: CharField.max_length

    O tamanho máximo (em caracteres) do campo. O ``max_length`` é verificado a
    nível de banco de dados e na validação do Django.

.. note::

    If you are writing an application that must be portable to multiple
    database backends, you should be aware that there are restrictions on
    ``max_length`` for some backends. Refer to the :ref:`database backend
    notes <ref-databases>` for details.

.. admonition:: MySQL users

    If you are using this field with MySQLdb 1.2.2 and the ``utf8_bin``
    collation (which is *not* the default), there are some issues to be aware
    of. Refer to the :ref:`MySQL database notes <mysql-collation>` for
    details.


``CommaSeparatedIntegerField``
------------------------------

.. class:: CommaSeparatedIntegerField(max_length=None, [**options])

Um campo de inteiros separados por vírgulas. Como no :class`CharField`, o
argumento :attr:`~CharField.max_length` é obrigatório e atente para as
portabilidades mencionadas.

``DateField``
-------------

.. class:: DateField([auto_now=False, auto_now_add=False, **options])

A date, represented in Python by a ``datetime.date`` instance. Has a few extra,
optional arguments:

.. attribute:: DateField.auto_now

    Configura o campo automaticamente para a hora em que o objeto é salvo. Útil
    para campos de hora da "última modificação". Note que *sempre* é usada a
    data atual, não é apenas um valor padrão que você pode sobrescrever.

.. attribute:: DateField.auto_now_add

    Configura automaticamente o campo para a data em que ele foi primeiramente
    criado. Útil para a criação de carimbos de data. Note que *sempre* é usada a
    data atual, não é apenas um valir padrão que você pode sobrescrever.

A administração representa isso como um ``<input type="text">`` com um
calendário JavaScript, e um atalho para "Hoje."  O calendário JavaScript sempre
irá iniciar a semana no Domingo.

``DateTimeField``
-----------------

.. class:: DateTimeField([auto_now=False, auto_now_add=False, **options])

A date and time, represented in Python by a ``datetime.datetime`` instance.
Um campo de data e hora. Tem as mesmas opções extras de :class:`DateField`.

A administração representa esse campo como dois campos ``<input type="text">``,
com atalhos JavaScript.

``DecimalField``
----------------

.. versionadded:: 1.0

.. class:: DecimalField(max_digits=None, decimal_places=None, [**options])

Um número decimal de precisão fixa, representado no Python por uma instância de
:class:`~decimal.Decimal`. Possui dois argumentos **obrigatórios**:

.. attribute:: DecimalField.max_digits

    O número máximo de dígitos permitidos no número.

.. attribute:: DecimalField.decimal_places

    O número de casas decimais para salvar com o número.

Por exemplo, para gravar números até 999 com uma precisão de 2 casas decimais,
você deve usar::

    models.DecimalField(..., max_digits=5, decimal_places=2)

E para guardar números de até aproximadamente um bilhão, com uma precisão de 10
casas decimais::

    models.DecimalField(..., max_digits=19, decimal_places=10)

A administração representa isso como um ``<input type="text">`` (um input de uma
única linha).

``EmailField``
--------------

.. class:: EmailField([max_length=75, **options])

Um :class:`CharField` que verifica se o valor é um e-mail válido.

``FileField``
-------------

.. class:: FileField(upload_to=None, [max_length=100, **options])

Um campo para upload de arquivo. Possui um argumento **obrigatório**

.. note::
    The ``primary_key`` and ``unique`` arguments are not supported, and will
    raise a ``TypeError`` if used.

Has one **required** argument:

.. attribute:: FileField.upload_to

    Um caminho no seu sistema de arquivos local que será adicionado a sua
    configuração :setting:`MEDIA_ROOT` para determinar o valor do atributo
    :attr:`~django.core.files.File.url`.

    Esse caminho pode conter `formatação strftime`_, que será substituído pela
    data/hora do upload do arquivo (para que os arquivos enviados não encham
    o diretório fornecido).

    .. versionchanged:: 1.0

    This may also be a callable, such as a function, which will be called to
    obtain the upload path, including the filename. This callable must be able
    to accept two arguments, and return a Unix-style path (with forward slashes)
    to be passed along to the storage system. The two arguments that will be
    passed are:

        ======================  ===============================================
        Argument                Description
        ======================  ===============================================
        ``instance``            An instance of the model where the
                                ``FileField`` is defined. More specifically,
                                this is the particular instance where the
                                current file is being attached.

                                In most cases, this object will not have been
                                saved to the database yet, so if it uses the
                                default ``AutoField``, *it might not yet have a
                                value for its primary key field*.

        ``filename``            The filename that was originally given to the
                                file. This may or may not be taken into account
                                when determining the final destination path.
        ======================  ===============================================

Also has one optional argument:

.. attribute:: FileField.storage

    .. versionadded:: 1.0

    Optional. A storage object, which handles the storage and retrieval of your
    files. See :ref:`topics-files` for details on how to provide this object.

A administração representa esse campo como um ``<input type="file">`` (um widget de
upload de arquivo).

O uso de um :class:`FileField` ou um :class:`ImageField` (veja abaixo) em um
modelo requer alguns passos adicionais:

    1. No seu arquivo de configurações, você precisa definir
       :setting:`MEDIA_ROOT` como o caminho completo para o diretório onde você
       gostaria que o Django guardasse os arquivos enviados. (Por questões de
       performance, esses arquivos não são guardados no banco de dados). Defina
       o  :setting:`MEDIA_URL` como a URL pública desse diretório. Assegure-se
       de que esse diretório tenha permissão de escrita pela conta do usuário
       que executa o servidor web.

    2. Adiciona o :class:`FileField` ou :class:`ImageField` ao seu modelo,
       definindo a opção :attr:`~FileField.upload_to` para dizer ao Django para
       qual subdiretório do :setting:`MEDIA_ROOT` ele deve enviar os arquivos.

    3. Tudo o que será gravado no seu banco de dados é o caminho para o arquivo
       (relativo ao :setting:`MEDIA_ROOT`). Você muito provavalmente usará a
       função :attr:`~django.core.files.File.url` fornecida pelo Django. Por
       exemplo, se seu :class:`ImageField` é chamado de ``mug_shot``, você pode
       obter a URL absoluta para sua imagem em um template com
       ``{{ object.get_mug_shot.url }}``.

Por exemplo, digamos que o seu :setting:`MEDIA_ROOT` esteja configurado para
``'/home/media'``, e o :attr:`~FileField.upload_to` está configurado para
``'photos/%Y/%m/%d'``. A parte ``'%Y/%m/%d'`` do :attr:`~FileField.upload_to` é
a `formatação strftime`_; ``'%Y'`` é o ano com quatro digítos,
``'%m'`` é o mês com dois dígitos e ``'%d'`` é o dia com dois dígitos. Se você
enviar um arquivo em 15 de janeiro de 2007, ele será salvo no diretório
``/home/media/photos/2007/01/15``.

Se você quer obter o nome do arquivo no disco, ou a URL que se refere àquele
arquivo, ou o tamanho do arquivo, você pode usar os métodos
:attr:`~django.core.files.File.name`, :attr:`~django.core.files.File.url` e :attr:`~django.core.files.File.size`. Veja :ref:`topics-files`.

Observe que independente da forma que você lida com arquivos enviados, você deve
prestar muita atennção para onde você os está enviado e para quais tipos eles
são, para evitar furos de segurança. *Valide todos os arquivos enviados* para
assegurar-se que eles são o que você pensa que eles são. Por exemplo, se você
permite que alguém envie arquivos sem validação, para um diretório que esteja
dentro do document root do seu servidor web, então alguém poderia enviar um
script CGI ou PHP e executar esse script visitando essa URL em seu site URL. Não
permita isso.

.. versionadded:: 1.0
   O argumento ``max_length`` foi adicionado nesta versão.

Por padrão, instâncias de :class:`FileField` são criadas como colunas
``varchar(100)`` no seu banco de dados. Assim como nos outros campos, você
pode mudar o tamanho máximo usando o argumento :attr:`~CharField.max_length`.

.. _`formatação strftime`: http://docs.python.org/lib/module-time.html#l2h-1941

``FilePathField``
-----------------

.. class:: FilePathField(path=None, [match=None, recursive=False, max_length=100, **options])

Um campo :class:`CharField` cujas escolhas são limitadas a nomes de arquivos em
um certo diretório no sistema de arquivos. Tem três argumentos especiais, sendo
o primeiro **obrigatório**:

.. attribute:: FilePathField.path

    Obrigatório. O caminho absoluto para um diretório no sistema de arquivos a
    partir de onde o :class:`FilePathField` deve obter suas opções. Exemplo:
    ``"/home/images"``.

.. attribute:: FilePathField.match

    Opcional. Uma expressão regular, como uma string, que o
    :class:`FilePathField` usará para filtrar os nomes dos arquivos. Perceba que
    a regex será aplicada apenas ao nome do aruqivo, não ao caminho completo.
    Exemplo: ``"foo.*\.txt$"``, que irá casar um arquivo chamado ``foo23.txt``
    mas não ``bar.txt`` ou ``foo23.gif``.

.. attribute:: FilePathField.recursive

    Opcional. ``True`` ou``False``. O padrão é ``False``. Especifica se todos os
    subdiretórios do :attr:`~FilePathField.path` devem ser incluídos.

E é claro que todos esses argumentos podem ser usados juntos.

A única pegadinha em potencial é que o :attr:`~FilePathField.match` aplica-se ao
nome básico do arquivo, não ao caminho completo. Assim, esse exemplo::

    FilePathField(path="/home/images", match="foo.*", recursive=True)

...irá casar ``/home/images/foo.gif`` mas não ``/home/images/foo/bar.gif``
porque o argumento :attr:`~FilePathField.match` aplicase aos nomes básicos dos
arquivos (``foo.gif`` e ``bar.gif``).


.. versionadded:: 1.0
    O argumento ``max_length`` foi adicionado nesta versão.

Por padrão, instâncias de :class:`FilePathField` são criadas como colunas
``varchar(100)`` no seu banco de dados. Assim como nos outros campos, você pode
mudar o tamanho máximo usando o argumento :attr:`~CharField.max_length`.

``FloatField``
--------------

.. class:: FloatField([**options])

.. versionchanged:: 1.0

Um número de ponto flutuante, representado no Python como uma instância de um
``float``.

A administração representa-o como um ``<input type="text">`` (um input de uma
única linha).

``ImageField``
--------------

.. class:: ImageField(upload_to=None, [height_field=None, width_field=None, max_length=100, **options])

Semelhante ao :class:`FileField`, mas verifica se o objeto enviado é uma imagem
válida. Tem dois argumentos extras opcionais:

.. attribute:: ImageField.height_field

    Nome de um campo de model que será auto-populado com a altura da imagem toda
    vez que a instância do model for salva.

.. attribute:: ImageField.width_field

    Nome de um campo de model que será auto-populado com a largura da imagem
    toda vez que a instância do model for salva.

Além dos métodos especiais que estão disponíveis para :class:`FileField`, um
class:`ImageField` também tem os atributos ``File.height`` e ``File.width``.
Veja :ref:`topics-files`.

Requer a `Python Imaging Library`_.

.. _Python Imaging Library: http://www.pythonware.com/products/pil/

.. versionadded:: 1.0
   O argumento attr:`~CharField.max_length` foi adicionado nesta versão.

Por padrão, instâncias de :class:`ImageField` são criadas como colunas
``varchar(100)`` no seu banco de dados. Assim como nos outros campos, você pode
mudar o tamanho máximo usando o argumento :attr:`~CharField.max_length`.

``IntegerField``
----------------

.. class:: IntegerField([**options])

Um inteiro. A administração representa-o como um ``<input type="text">`` (um
input de uma única linha).

``IPAddressField``
------------------

.. class:: IPAddressField([**options])

Um endereço IP, em formato texto (ex: "192.0.2.30"). A administração
representa-o como um ``<input type="text">`` (um input de uma única linha).

``NullBooleanField``
--------------------

.. class:: NullBooleanField([**options])

Como um :class:`BooleanField`, mas permite ``NULL`` como uma das opções. Use-o
no lugar de um :class:`BooleanField` com ``null=True``. A administração
representa-o como uma caixa ``<select>`` com as escolhas "Unknown", "Yes" e "No".

``PositiveIntegerField``
------------------------

.. class:: PositiveIntegerField([**options])

Como um :class:`IntegerField`, mas deve ser positivo.

``PositiveSmallIntegerField``
-----------------------------

.. class:: PositiveSmallIntegerField([**options])

Como um :class:`PositiveIntegerField`, mas somente permite valores até um certo
ponto (de acordo com o tipo de banco de dados utilizado).

``SlugField``
-------------

.. class:: SlugField([max_length=50, **options])

:term:`Slug` é um termo jornalístico. Um slug é um apelido curto para algo,
contendo somente letras, números, underscores ou hífens. Eles normalmente são
usados em URLs.

Semelhantemente ao CharField, você pode especificar o
:attr:`~CharField.max_length` (leia a nota sobre portabilidade de banco de
dados e :attr:`~CharField.max_length` nesta seção também). Se o
:attr:`~CharField.max_length` não for especificado, o Django irá usar um tamanho
padrão de 50.

Implica em :attr:`Field.db_index`.

It is often useful to automatically prepopulate a SlugField based on the value
of some other value.  You can do this automatically in the admin using
:attr:`~django.contrib.admin.ModelAdmin.prepopulated_fields`.

``SmallIntegerField``
---------------------

.. class:: SmallIntegerField([**options])

Como um :class:`IntegerField`, mas somente permite valores até um certo
ponto (dependendo do banco de dados).

``TextField``
-------------

.. class:: TextField([**options])

Um campo de texto longo. A administração o representa como uma ``<textarea>``
(um input de múltiplas linhas).

.. admonition:: MySQL users

    If you are using this field with MySQLdb 1.2.1p2 and the ``utf8_bin``
    collation (which is *not* the default), there are some issues to be aware
    of. Refer to the :ref:`MySQL database notes <mysql-collation>` for
    details.

``TimeField``
-------------

.. class:: TimeField([auto_now=False, auto_now_add=False, **options])

Uma hora. Representado em Python por uma instância ``datetime.time``. Aceita as
mesmas opções de auto preenchimento dos campos :class:`DateField`.

A administração o representa como uma ``<input type="text">`` com alguns
atalhos JavaScript.

``URLField``
------------

.. class:: URLField([verify_exists=True, max_length=200, **options])

Um :class:`CharField` para uma URL. Possui um argumento extra opicional:

.. attribute:: URLField.verify_exists

    Se a opção for ``True`` (padrão), a existência da URL será verificada
    (i.e., será verificado se a URL carrega e não retorna uma reposta 404). It
    should be noted that when using the single-threaded development server,
    validating a url being serverd by the same server will hang.
    This should not be a problem for multithreaded servers.

A administração representa-o como um ``<input type="text">`` (um input de uma
única linha).

Como toda subclasse de :class:`CharField`, :class:`URLField` recebe um argumento
opcional, :attr:`~CharField.max_length`. Se você não especificar o
:attr:`~CharField.max_length`, o padrão de 200 é usado.

``XMLField``
------------

.. class:: XMLField(schema_path=None, [**options])

Um :class:`TextField` que verifica se o valor é um XML válido de acordo com um
esquema fornecido. Possui um argumento obrigatório:

.. attribute:: schema_path

    O caminho no sistema de arquivos para um esquema RelaxNG_ que será usado
    para a validação do campo.

.. _RelaxNG: http://www.relaxng.org/

Relationship fields
===================

.. module:: django.db.models.fields.related
   :synopsis: Related field types

.. currentmodule:: django.db.models

Django also defines a set of fields that represent relations.

.. _ref-foreignkey:

``ForeignKey``
--------------

.. class:: ForeignKey(othermodel, [**options])

A many-to-one relationship. Requires a positional argument: the class to which
the model is related.

.. _recursive-relationships:

To create a recursive relationship -- an object that has a many-to-one
relationship with itself -- use ``models.ForeignKey('self')``.

.. _lazy-relationships:

If you need to create a relationship on a model that has not yet been defined,
you can use the name of the model, rather than the model object itself::

    class Car(models.Model):
        manufacturer = models.ForeignKey('Manufacturer')
        # ...

    class Manufacturer(models.Model):
        # ...

.. versionadded:: 1.0

To refer to models defined in another application, you can explicitly specify
a model with the full application label. For example, if the ``Manufacturer``
model above is defined in another application called ``production``, you'd
need to use::

    class Car(models.Model):
        manufacturer = models.ForeignKey('production.Manufacturer')

This sort of reference can be useful when resolving circular import
dependencies between two applications.

Database Representation
~~~~~~~~~~~~~~~~~~~~~~~

Behind the scenes, Django appends ``"_id"`` to the field name to create its
database column name. In the above example, the database table for the ``Car``
model will have a ``manufacturer_id`` column. (You can change this explicitly by
specifying :attr:`~Field.db_column`) However, your code should never have to
deal with the database column name, unless you write custom SQL. You'll always
deal with the field names of your model object.

.. _foreign-key-arguments:

Arguments
~~~~~~~~~

:class:`ForeignKey` accepts an extra set of arguments -- all optional -- that
define the details of how the relation works.

.. attribute:: ForeignKey.limit_choices_to

    A dictionary of lookup arguments and values (see :ref:`topics-db-queries`)
    that limit the available admin choices for this object. Use this with
    functions from the Python ``datetime`` module to limit choices of objects by
    date. For example::

        limit_choices_to = {'pub_date__lte': datetime.now}

    only allows the choice of related objects with a ``pub_date`` before the
    current date/time to be chosen.

    Instead of a dictionary this can also be a :class:`~django.db.models.Q`
    object (an object with a :meth:`get_sql` method) for more complex queries.

    ``limit_choices_to`` has no effect on the inline FormSets that are created
    to display related objects in the admin.

.. attribute:: ForeignKey.related_name

    The name to use for the relation from the related object back to this one.
    See the :ref:`related objects documentation <backwards-related-objects>` for
    a full explanation and example. Note that you must set this value
    when defining relations on :ref:`abstract models
    <abstract-base-classes>`; and when you do so
    :ref:`some special syntax <abstract-related-name>` is available.

.. attribute:: ForeignKey.to_field

    The field on the related object that the relation is to. By default, Django
    uses the primary key of the related object.

.. _ref-manytomany:

``ManyToManyField``
-------------------

.. class:: ManyToManyField(othermodel, [**options])

A many-to-many relationship. Requires a positional argument: the class to which
the model is related. This works exactly the same as it does for
:class:`ForeignKey`, including all the options regarding :ref:`recursive
<recursive-relationships>` and :ref:`lazy <lazy-relationships>` relationships.

Database Representation
~~~~~~~~~~~~~~~~~~~~~~~

Behind the scenes, Django creates an intermediary join table to represent the
many-to-many relationship. By default, this table name is generated using the
names of the two tables being joined. Since some databases don't support table
names above a certain length, these table names will be automatically
truncated to 64 characters and a uniqueness hash will be used. This means you
might see table names like ``author_books_9cdf4``; this is perfectly normal.
You can manually provide the name of the join table using the
:attr:`~ManyToManyField.db_table` option.

.. _manytomany-arguments:

Arguments
~~~~~~~~~

:class:`ManyToManyField` accepts an extra set of arguments -- all optional --
that control how the relationship functions.

.. attribute:: ManyToManyField.related_name

    Same as :attr:`ForeignKey.related_name`.

.. attribute:: ManyToManyField.limit_choices_to

    Same as :attr:`ForeignKey.limit_choices_to`.

    ``limit_choices_to`` has no effect when used on a ``ManyToManyField`` with a
    custom intermediate table specified using the
    :attr:`~ManyToManyField.through` paramter.

.. attribute:: ManyToManyField.symmetrical

    Only used in the definition of ManyToManyFields on self. Consider the
    following model::

        class Person(models.Model):
            friends = models.ManyToManyField("self")

    When Django processes this model, it identifies that it has a
    :class:`ManyToManyField` on itself, and as a result, it doesn't add a
    ``person_set`` attribute to the ``Person`` class. Instead, the
    :class:`ManyToManyField` is assumed to be symmetrical -- that is, if I am
    your friend, then you are my friend.

    If you do not want symmetry in many-to-many relationships with ``self``, set
    :attr:`~ManyToManyField.symmetrical` to ``False``. This will force Django to
    add the descriptor for the reverse relationship, allowing
    :class:`ManyToManyField` relationships to be non-symmetrical.

.. attribute:: ManyToManyField.through

    Django will automatically generate a table to manage many-to-many
    relationships. However, if you want to manually specify the intermediary
    table, you can use the :attr:`~ManyToManyField.through` option to specify
    the Django model that represents the intermediate table that you want to
    use.

    The most common use for this option is when you want to associate
    :ref:`extra data with a many-to-many relationship
    <intermediary-manytomany>`.

.. attribute:: ManyToManyField.db_table

    The name of the table to create for storing the many-to-many data. If this
    is not provided, Django will assume a default name based upon the names of
    the two tables being joined.

.. _ref-onetoone:

``OneToOneField``
-----------------

.. class:: OneToOneField(othermodel, [parent_link=False, **options])

A one-to-one relationship. Conceptually, this is similar to a
:class:`ForeignKey` with :attr:`unique=True <Field.unique>`, but the
"reverse" side of the relation will directly return a single object.

This is most useful as the primary key of a model which "extends"
another model in some way; :ref:`multi-table-inheritance` is
implemented by adding an implicit one-to-one relation from the child
model to the parent model, for example.

One positional argument is required: the class to which the model will be
related. This works exactly the same as it does for :class:`ForeignKey`,
including all the options regarding :ref:`recursive <recursive-relationships>`
and :ref:`lazy <lazy-relationships>` relationships.

.. _onetoone-arguments:

Additionally, ``OneToOneField`` accepts all of the extra arguments
accepted by :class:`ForeignKey`, plus one extra argument:

.. attribute:: OneToOneField.parent_link

    When ``True`` and used in a model which inherits from another
    (concrete) model, indicates that this field should be used as the
    link back to the parent class, rather than the extra
    ``OneToOneField`` which would normally be implicitly created by
    subclassing.

